SPINNY -- 
oops concept
inhertance vs composition
string advantage
string vs string buffer
multithreading in python
Q - Given an integer A, generate a square matrix filled with elements from 1 to A^2  in spiral order.
Given I/p A = 2 , 
 
 O/p -  [  [ 1, 2 ]              
               [ 4,3 ] ]   
Q - Return number of ways it can be written as sum of consecutive integers ?
   Input  - 15 
    O/p -  4
Illustration  -> [  [1,2,3,4,5] ,  [ 15 ] , [ 7,8 ], [ 4,5,6] ] 

--Patdel 
move all zeroes to right
list1 = [-1,0,2,3,-4,0,0]
out = [-1,2,3,-4,0,0,0]
flatten the list
list2 = [[10,11],[1,2,3,[4,5]]]
output = [0,1,2,3,4,5]
basic djago application design, http points,post method, database table design for comment box

--Paytm
oops concept
decorator what why how
memory management in python,scope in python, iterator and generator,
caching
proxy model
module vs package
tuple dict and list ,can dict have list as a key
else in for loop and try except finally
namespace
pip list 
python path
high order function , build in function
class, init, object, can class take a memory

--L&T
abstraction and data hiding
remove duplicates from list and print into asc order
decimal to binary
number = 5678
def getSum(n): of number = 5+ 6+ 7 + 8 = 26 = 2+6
binary to decimal
 --
 Enclosed Scope
 deep copy(.copy=> make a new memory object) and shellow copy(== change in same list too)
 MRO
 
 --EXL
 python3 djnagoadmin startproject dummy

someapi/v1/1-100

path(someapi/v1/"<int:id<1>",view.as_view()) # how to given range in this 1 to 9
model = student
class studenData(APIView):
  def get(self,request,key=None):
    if key is not None:
      student = Student.objects.get(id=key) #filter what will happen
      return Respose({'status':success,'data':Student},status=Http_200_ok)
#names, ages = ['Raj', 'Ana'], [12, 48]
#users = dict(zip(names, ages)) -- what will happen
set1, set2 = {2, 3, 4}, {3, 4, 5}
print(set1 |= set2) # intergation
-- try and catch
# list1 = [i for i in range(10,101)]
list1 = []
for i in range(10,101):
  if i %10 == 0:
    list1.append(i)
print(list1)

def running(num1,num2,list1):

  if num1 < 0 or num2 < 0:
    return -1
  if num1 > num2:
    return 0
  
  
  sum = 0
  try:
    index1 = list1.index(num1)
    index2 = list1.index(num2)
    for i in range(index1,index2+1):
      sum += list1[i]
  except:
    print('list have not this index')
  
  return sum

print(running(1,40,list1))
# 20,40
# => 20+30+40
--Gemini:
-- list and dict and touple
-- flatten a list(recursion)
-- how to copy one table column to other
-- max salary
-- having and where 


 --barazzer shivraj (Capri global)
 # Given an array of binary number, find the maximum length sub-array with equal number of 1 and 0.
 Unit Tests are isolated tests that test one specific function. Integration Tests, meanwhile, are larger tests that focus on user behavior and testing entire applications.
dependency injection in django
https://www.cosmicpython.com/book/chapter_02_repository.html
Repository Pattern
decorator 
-- 3c solution (kartik)
list1 = [(57,3),(1,2),(3,4),(76,56)] sort according to last element of list
razorpay intergation questions
context switiching
multithreading and multiprocessing 
python is one thread langage but it is multiprocessing
custom authnitication in djnago
signals in djnago
post save -> 2 table -> employee and organization but post_save done before organization but we need organization id too but server is failed 
so how it handle => atomic transcation
triangle question
context manager => with keyboard
model inheritance (python is multilevel or multiple inherance)

 --crakau
 #Given an array of integers, find the highest product you can get from multiplying any three of the integers.
 #Write a python function that, given a string , along with the position of an opening parenthesis in the string, finds the corresponding closing parenthesis.
#"Sometimes (when I nest them (my parentheticals) too much (like this (and this))) they get confusing."
#Example: if the example string above is input with the number 10 (position of the first parenthesis), the output should be 79 (position of the last parenthesis).
#
#try except raise
def example():
  try:
    int('N/A')
  except ValueError as e:
    raise RuntimeError('A parsing error occurred') from e... 
example()

try:  
    a = 100
    b = 4 #"DataCamp"
    assert a + b
except AssertionError:  
        print ("Assertion Exception Raised.")
else:  
    print ("Success, no error!")

output = Success, no error!


def gen(a,b):
  m = a + b
  yield a
  yield b
  yield m

x = gen(4,5)
print(x.__next__())
print(x.__next__())
print(x.__next__())
# print(x.__next__())


list1 = [(57,3),(1,2),(3,4),(76,56)]

# x = list(map(lambda x : sorted())) #sorted a list in one line function using lambda function
@greeting
def sortedList(list1):
  list2 = []
  for i in range(len(list1)):
    for j in range(i,len(list1)):
      m = list1[i][len(list1[i])-1]
      n = list1[j][len(list1[j])-1]
      if m > n:
        list1[i],list1[j] = list1[j],list1[i]
  return list1

print(sortedList(list1))

Happy new year to me!!
-- Landmark
django artichecture 
wsgi.py file
can I use multiple database in django --  Django supports multiple databases.
settings.py
DATABASES = {
   'default': {   
     'ENGINE': 'django.db.backends.mysql',
    'USER': 'mysql_user',
    'PASSWORD': 'priv4te'
    },

   'product_db' : {
      'ENGINE' : 'django_mongodb_engine',
      'NAME' : 'my_database'
   }
}
db_for_read,db_for_write,allow_relation,allow_migrate
$ ./manage.py migrate
$ ./manage.py migrate --database=product_db
DATABASE_ROUTERS = ['path.to.DbRouter', ] in setting file
touple and set difference
trascation in databse,database engines,indexing -- https://www.tutorialspoint.com/dbms/dbms_transaction.htm
let and var difference in js
let	                                                   var
let is block-scoped.	                                  var is function scoped.
let does not allow to redeclare variables.	            var allows to redeclare variables.
Hoisting does not occur in let.	                       Hoisting occurs in var.
console.log(a); //given error                          console.log(a); //no error
let a =5;                                              var a =5;  
window and document  in js
Document                                                                     Window 
It represents the document loaded inside the window or browser.	             It represents the browser window in which you are seeing the content.
The properties related to it are stored in the document object.	             The properties related to it are stored in the window object.
It is loaded after the loading window because the window contains a document.	It is loaded before the document because window container document.
It is the root element of the document object model.	                         The window is the global element for all objects, functions, etc.
It is an object of window.	It is an object of the browser.
We can not access windows objects properties inside the document.	           We can access document object properties inside the window.
logically:                                                                   logically:
document:{ properties}                                                        window:{document:{properties}}

Example: document.title will return the title of the document	              Example: window.document.title will return the title of the document.


# input list
inputList = ['TutorialsPoint', 'Python', 'Codes', 'hello', 5, 'everyone', 10, 5.3]

# Converting list elements to string using map()
# Applying join() function to convert list to string
# Without using the asterisk (*) operator
print('Without Using * Operator :')
print(' '.join(map(str,inputList)))

# Using the asterisk (*) operator
print('Using * operator : ')
print (*inputList)
MySQL database engines--
Transactional Databases: In this type, we can roll back the write operations on the database if they are left incomplete. These operations are known as transactions. Majorly, modern engines are transactional.
Non-Transactional Databases: Unlike transactional databases, they donâ€™t provide Rollback/Commit. Instead, we need to manually code to perform the rollback operations.   
https://www.geeksforgeeks.org/what-are-the-different-mysql-database-engines/#:~:text=Database%20engines%20are%20MySQL%20components,MySQL%205.5%20and%20above%20versions.


Indexing is a way to optimize the performance of a database by minimizing the number of disk accesses required when a query is processed. It is a data structure technique which is used to quickly locate and access the data in a database. 

Indexes are created using a few database columns. 

The first column is the Search key that contains a copy of the primary key or candidate key of the table. These values are stored in sorted order so that the corresponding data can be accessed quickly. 
Note: The data may or may not be stored in sorted order.
The second column is the Data Reference or Pointer which contains a set of pointers holding the address of the disk block where that particular key value can be found.

